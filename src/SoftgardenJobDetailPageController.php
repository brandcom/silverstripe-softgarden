<?php

namespace brandcom\Softgarden;

use SilverStripe\View\Requirements;
use SilverStripe\Core\Environment;

class SoftgardenJobDetailPageController extends \PageController
{
    private static $allowed_actions = ["showjob", "jobAutoImport"];

    private $job;

    protected function init()
    {
        parent::init();
        Requirements::css('./vendor/brandcom/silverstripe-softgarden/client/dist/softgardenstyles.css');
        Requirements::javascript('./vendor/brandcom/silverstripe-softgarden/client/dist/softgardenscripts.js');
    }

    /**
     * Displays the details of a job.
     *
     * @param SS_HTTPRequest $request The HTTP request object.
     * @return array Returns an array containing the job detail.
     * @throws SS_HTTPResponse_Exception Throws an exception if the job is not found.
     */
    public function showjob($request)
    {
        $jobID = $request->param("ID");

        $this->job = JobDataObject::get()->filter('jobDbId', $jobID)->first();

        if (!$this->job || !$this->job->exists()) {
            return $this->httpError(404, 'Job not found');
        }

        return ['Jobdetail' => $this->job];
    }

    /**
     * Returns the title of the job detail page.
     *
     * @return string The title of the job detail page.
     */
    public function getTitle(): string
    {
        return $this->job->externalPostingName;
    }

    /**
     * Returns the meta title for the job detail page.
     *
     * @return string The meta title.
     */
    public function getMetaTitle(): string
    {
        return $this->getTitle();
    }

    /**
     * Returns the meta description for the job detail page.
     *
     * The meta description is generated by combining the page title with the city of the job.
     *
     * @return string The meta description for the job detail page.
     */
    public function getMetaDescription(): string
    {
        $metaDesc = $this->getTitle() . ' ' . $this->job->geo_city;
        return $metaDesc;
    }

    /**
     * Retrieves the benefits as a JSON string.
     *
     * This method fetches the job benefits from the database and converts them into a JSON string.
     * Each benefit is represented as an associative array with the 'benefit' and 'benefit_icon_url' keys.
     *
     * @return string The benefits as a JSON string.
     */
    public function getBenefitsJson(): string
    {
        $benefits = [];
        foreach (JobBenefitDataObj::get() as $benefit) {
            $benefits[] = [
                'benefit' => $benefit->Benefit,
                'benefit_icon_url' => $benefit->BenefitIcon()->Link()
            ];
        }

        return json_encode($benefits);
    }


    /**
     * Executes the job auto import process.
     *
     * This method is responsible for handling the job auto import request. 
     * It checks if the provided token matches the expected token and if so, 
     * it creates a new instance of the JobAutoBuildTask class and runs it with the given request.
     *
     * @param mixed $request The request object.
     * @return void
     */
    public function jobAutoImport($request): void
    {
        $requestedToken = Environment::getEnv("SOFTGARDEN_AUTO_BUILDTASK_TOKEN");
        $token = $request->requestVar("token");
        if ($requestedToken == $token) {
            $task = new JobAutoBuildTask();
            $task->run($request);
        }
    }

}
